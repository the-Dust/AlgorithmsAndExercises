using Utils;

namespace GreedyAlgorithms
{
    [ShouldRepeat]
    public class BulbSwitching
    {
        public void SelfTest()
        {
            var res = Calculate(new[] { false, true, true, true, false, true }); // 4
        }

        public int Calculate(bool[] bulbArr)
        {
            // жадный алгоритм выводится на основе трёх лемм:
            // 1 если слева от какой-то позиции стоит ряд включенных ламп, то мы их не переключаем - очевидно, т.к. это
            // даст только увеличение переключений без какой-либо пользы
            // 2 переключение двух рандомных переключателей в разном порядке приведет к одинаковому результату - прямое доказательство:
            // пусть есть состояния a b c d e f g и мы переключаем b и e: если включить сначала b, потом е:
            // a b c d e f g -> a !b !c !d !e !f !g -> a !b !c !d e f g
            // если наоборот: a b c d e f g -> a b c d !e !f !g -> a !b !c !d e f g => видим одинаковый результат
            // 3 каждый выключатель в оптимальной серии нажимается хотя бы 1 раз - чтобы не трогать выключатель, он должен быть самым левым,
            // т.к. иначе он будет переключен хотя бы раз по определению, но если он будет самым левым, то он будет включать выключенную лампу,
            // т.к. еще левее него будут только включенные лампы (см лемму 1), в таком случае, не включив этот выключатель мы оставим одну из
            // ламп невключенной
            // => алгоритм: включаем первую невключенную лампу и движемся дальше

            int count = 0;
            for (int i = 0; i < bulbArr.Length; i++)
            {
                if (!bulbArr[i])
                {
                    count++;
                    for (int j = i; j < bulbArr.Length; j++)
                        bulbArr[j] = !bulbArr[j];
                }
            }
            return count;
        }
    }
}
